// Code generated by generateopts; DO NOT EDIT.

package myapp

type UserOption interface {
	apply(*User) error
}

type userOptionFunc func(*User) error

func (f userOptionFunc) apply(s *User) error {
	return f(s)
}

func WithName(v string) UserOption {
	return userOptionFunc(func(s *User) error {
		s.Name = v
		return nil
	})
}

func WithAge(v int) UserOption {
	return userOptionFunc(func(s *User) error {
		s.Age = v
		return nil
	})
}

func NewUser(opts ...UserOption) (*User, error) {
	obj := &User{}
	for _, opt := range opts {
		if err := opt.apply(obj); err != nil {
			return nil, err
		}
	}
	return obj, nil
}

type SecretUserOption interface {
	apply(*SecretUser) error
}

type secretUserOptionFunc func(*SecretUser) error

func (f secretUserOptionFunc) apply(s *SecretUser) error {
	return f(s)
}

func SecretUser_WithName(v string) SecretUserOption {
	return secretUserOptionFunc(func(s *SecretUser) error {
		s.Name = v
		return nil
	})
}

func SecretUser_WithAge(v int) SecretUserOption {
	return secretUserOptionFunc(func(s *SecretUser) error {
		s.Age = v
		return nil
	})
}

func NewSecretUser(opts ...SecretUserOption) (*SecretUser, error) {
	obj := &SecretUser{}
	for _, opt := range opts {
		if err := opt.apply(obj); err != nil {
			return nil, err
		}
	}
	return obj, nil
}

type TimeOption interface {
	apply(*Time) error
}

type timeOptionFunc func(*Time) error

func (f timeOptionFunc) apply(s *Time) error {
	return f(s)
}

func WithNano(v int64) TimeOption {
	return timeOptionFunc(func(s *Time) error {
		s.Nano = v
		return nil
	})
}

func NewTime(opts ...TimeOption) (*Time, error) {
	obj := &Time{}
	for _, opt := range opts {
		if err := opt.apply(obj); err != nil {
			return nil, err
		}
	}
	return obj, nil
}
